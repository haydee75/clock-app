{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","getDayTime","Date","getHours","state","apiMessage","isToggleOn","isHover","loading","city","countryCode","userData","randomQuote","generateRandomQuote","bind","toggleInfos","hoverBtn","this","setState","fetch","then","response","ok","json","Promise","reject","data","console","log","country_code","ip","catch","error","className","content","author","onClick","width","height","xmlns","d","fill","fillRule","opacity","format","datetime","abbreviation","onMouseEnter","onMouseLeave","timezone","day_of_year","day_of_week","week_number","style","color","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e84cf00.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Moment from 'react-moment';\nimport \"./App.scss\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    let today = new Date()\n    let curHr = today.getHours()\n\n    let getDayTime;\n\n    if (curHr < 12) {\n      getDayTime = true\n    } else {\n      getDayTime = false\n    }\n\n    this.state = {\n      apiMessage: \"\",\n      isToggleOn: false,\n      isHover: false,\n      loading: false,\n      getDayTime: getDayTime,\n      city: \"\",\n      countryCode: \"\",\n      userData: {},\n      randomQuote: {}\n    };\n\n    this.generateRandomQuote = this.generateRandomQuote.bind(this);\n    this.toggleInfos = this.toggleInfos.bind(this);\n    this.hoverBtn = this.hoverBtn.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({loading: true})\n    fetch(\"https://api.quotable.io/random\")\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          return Promise.reject(response);\n        }})\n      .then(data => {\n        this.setState({\n          loading: false,\n          randomQuote: data\n      })\n    })   \n\n    fetch('https://freegeoip.app/json/')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          return Promise.reject(response);\n        }})\n        .then(data => {\n          console.log(data)\n          this.setState({\n            city: data.city,\n            countryCode: data.country_code\n          })\n\n\t  return fetch('http://worldtimeapi.org/api/ip/' + data.ip);\n\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        return Promise.reject(response);\n      }\n    }).then(userData => {\n      this.setState({\n        userData: userData\n      })\n    }).catch(error => {\n      this.setState({\n        apiMessage: 'It look like the API worldtimeapi kinda sucks please give another try to get dynamic datas and reload the page OR stay and get hard coded datas...'\n      })\n    });\n  }\n\n  generateRandomQuote() {\n    fetch(\"https://api.quotable.io/random\")\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          return Promise.reject(response);\n        }})\n      .then(data => {\n        this.setState({\n          randomQuote: data\n      })\n    })\n  }\n\n  toggleInfos() {\n    this.setState(state => ({\n      isToggleOn: !state.isToggleOn\n    }));\n  }\n\n  hoverBtn() {\n    this.setState(state => ({\n      isHover: !state.isHover\n    }));\n  }\n  \n  render() {\n    return (\n      <section className=\"Container\">\n        <div className={`Row ${this.state.getDayTime ? 'Morning' : 'Evening'}`}>\n          <div className=\"Content Main-info\">\n            <div className={`Content up ${this.state.isToggleOn ? 'hidden' : 'visible'}`}>\n              <figure className=\"quote\">\n                <blockquote>{this.state.randomQuote.content}</blockquote>\n                <figcaption>{this.state.randomQuote.author}</figcaption>\n                </figure>\n              <span className=\"refreshCta\" onClick={this.generateRandomQuote}><svg width=\"18\" height=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M7.188 10.667a.208.208 0 01.147.355l-2.344 2.206a5.826 5.826 0 009.578-2.488l2.387.746A8.322 8.322 0 013.17 14.94l-2.149 2.022a.208.208 0 01-.355-.148v-6.148h6.52zm7.617-7.63L16.978.958a.208.208 0 01.355.146v6.23h-6.498a.208.208 0 01-.147-.356L13 4.765A5.825 5.825 0 003.43 7.26l-2.386-.746a8.32 8.32 0 0113.76-3.477z\" fill=\"#FFF\" fillRule=\"nonzero\" opacity=\".5\"/></svg></span>\n            </div>\n            <div className=\"down\">\n              <div className=\"welcome-content\">\n                <h4>{ this.state.getDayTime ? 'Good Morning' : 'Good Evening' }<span className=\"hide-mobile\">, it's currently</span></h4>\n                <div className=\"time-content\">\n                  <h1>\n                    <Moment format=\"hh:mm\">\n                      {this.state.userData.datetime}\n                    </Moment>\n                    <span>{this.state.userData.abbreviation ? this.state.userData.abbreviation : \"EDT\"}</span>\n                  </h1>\n                </div>\n                <div className=\"location-content\">\n                  <h3>in {this.state.city ? this.state.city : \"Montreal\"}, {this.state.countryCode}</h3>\n                </div>\n              </div>\n              <button className=\"btn-toggle\" onClick={this.toggleInfos} onMouseEnter={this.hoverBtn} onMouseLeave={this.hoverBtn}><span className={this.state.isToggleOn ? 'active' : ''}>{this.state.isToggleOn ? 'Less' : 'More'}</span></button>\n            </div>\n          </div>\n\n          <div className={`Content More-info ${this.state.isToggleOn ? 'visible' : 'hidden'} ${this.state.isHover ? 'hover' : ''}`}>\n            <div className=\"More-Content\">\n              <div className=\"left-content\">\n                <div className=\"timezone\">\n                  <h6>Current timezone</h6>\n                  <h2>{this.state.userData.timezone ? this.state.userData.timezone : \"America/Toronto\"}</h2>\n                </div>\n                <div className=\"day-of-year\">\n                  <h6>Day of the year</h6>\n                  <h2>{this.state.userData.day_of_year ? this.state.userData.day_of_year : \"130\"}</h2>\n                </div>\n              </div>\n              <div className=\"right-content\">\n                <div className=\"day-of-week\">\n                  <h6>Day of the week</h6>\n                  <h2>{this.state.userData.day_of_week ? this.state.userData.day_of_week : \"1\"}</h2>\n                </div>\n                <div className=\"week-number\">\n                  <h6>Week number</h6>\n                  <h2>{this.state.userData.week_number ? this.state.userData.week_number : \"19\"}</h2>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <i style={{color:\"red\"}}>{this.state.apiMessage}</i>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}